plugins {
    id 'com.github.johnrengelman.shadow'
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

def generatedResources = project(':common').file("src/main/generated/resources")
def existingResources = project(':common').file("src/main/resources")

sourceSets {
    main {
        resources.srcDir generatedResources

        resources.exclude '.cache'
    }
}

loom {
    forge{
        mixinConfig "blubbysmodofdoom.mixins.json"

        runs {
            data {
                data()
                programArgs "--all"
                programArgs"--mod", "blubbysmodofdoom"
                programArgs "--output", generatedResources.absolutePath
                programArgs '--existing', existingResources.absolutePath
            }
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property "version", project.version

    duplicatesStrategy(DuplicatesStrategy.INCLUDE)

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

