plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

def generatedResources = project(':common').file("src/main/generated/resources")
def existingResources = project(':common').file("src/main/resources")

sourceSets {
    main {
        resources.srcDir generatedResources

        resources.exclude '.cache'
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        mixinConfig "blubbysmodofdoom.forge.mixins.json"

        runs {
            data {
                data()
                programArgs "--all"
                programArgs"--mod", "blubbysmodofdoom"
                programArgs "--output", generatedResources.absolutePath
                programArgs '--existing', existingResources.absolutePath
            }
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:$rootProject.architectury_api_version"


    //modCompileOnly("mezz.jei:jei-${rootProject.property("minecraft_version")}-forge-api:${rootProject.property("jei_version")}")
    //modRuntimeOnly("mezz.jei:jei-${rootProject.property("minecraft_version")}-forge:${rootProject.property("jei_version")}") { transitive false }
    compileOnly "mezz.jei:jei-${rootProject.property("minecraft_version")}-common-api:${rootProject.property("jei_version")}"
    // runtimeOnly "mezz.jei:jei-${rootProject.property("minecraft_version")}-forge:${rootProject.property("jei_version")}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    archiveBaseName.set("blubbysmodofdoom-forge")

    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    archiveBaseName.set("blubbysmodofdoom-forge")

    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    archiveBaseName.set("blubbysmodofdoom-forge")

    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}